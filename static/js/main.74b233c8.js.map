{"version":3,"file":"static/js/main.74b233c8.js","mappings":"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","sources":["mockedJson.js","index.js"],"sourcesContent":["//current csv file content\r\nvar csvContent = [];\r\n//mocked data for csv file 1\r\nvar csvData1 = [\r\n    [1, 2, 3, 4, 5],\r\n    [\"The\", \"song\", \"remains\", \"the\", \"same.\"],\r\n    [\"This\", \"is\", \"csv\", \"file\", \"one\"],\r\n];\r\n//mocked data for csv file 2\r\nvar csvData2 = [\r\n    [10, 20, 30, 40, 50],\r\n    [\"This\", \"is\", \"csv\", \"file\", \"2.\"],\r\n];\r\n//mocked data map\r\nvar dataMap = new Map([\r\n    [\"file1.csv\", csvData1],\r\n    [\"file2.csv\", csvData2],\r\n]);\r\n//mocked function to load csv\r\nfunction loadFile(csvFile) {\r\n    var result = dataMap.get(csvFile);\r\n    if (result) {\r\n        csvContent = result;\r\n        return \"success\";\r\n    }\r\n    else\r\n        return \"error\";\r\n}\r\n//mocked function to view csv\r\nfunction view() {\r\n    return csvContent;\r\n}\r\n//mocked function to seach csv, for a given csv file, it always return same result regardlesss of search criteria\r\nfunction search(column, value) {\r\n    if (column >= csvContent[0].length)\r\n        return [];\r\n    else\r\n        return [csvContent[1]];\r\n}\r\nexport { loadFile, view, search };\r\n","import * as mock from \"./mockedJson.js\";\r\n//gloable varaibels\r\nvar history = [];\r\nvar mode = \"brief\";\r\n// The window.onload callback is invoked when the window is first loaded by the browser\r\nwindow.onload = function () {\r\n    // If you're adding an event for a button click, do something similar.\r\n    // The event name in that case is \"click\", not \"keypress\", and the type of the element\r\n    // should be HTMLButtonElement. The handler function for a \"click\" takes no arguments.\r\n    prepareButtonClick();\r\n};\r\n/**\r\n * Function to prepare the event handler for the submit button. It retrieves the button from\r\n * the HTML and checks if it is the correct button, before attatching the eventListener to\r\n * the button.\r\n *\r\n * @returns: void\r\n * @param: none\r\n */\r\nfunction prepareButtonClick() {\r\n    var button = document.getElementById(\"submit-button\");\r\n    if (button == null) {\r\n        console.log(\"Couldn't find input element\");\r\n    }\r\n    else if (!(button instanceof HTMLButtonElement)) {\r\n        console.log(\"Found element \".concat(button, \", but it wasn't an button\"));\r\n    }\r\n    else {\r\n        // Notice that we're passing *THE FUNCTION* as a value, not calling it.\r\n        // The browser will invoke the function when a key is pressed with the input in focus.\r\n        //  (This should remind you of the strategy pattern things we've done in Java.)\r\n        button.addEventListener(\"click\", handleButtonClick);\r\n    }\r\n}\r\n/**\r\n * The event handler for the submit button. If the text in the REPL field is \"get\", it will print out the\r\n * contents of mock.json, and if the text is \"stats\" it will print out the number of rows and columns\r\n * in the equivalent CSV. Otherwise, an error will output.\r\n *\r\n * @returns: void\r\n * @param: none\r\n */\r\nfunction handleButtonClick() {\r\n    var maybeInput = document.getElementById(\"repl-command-box\");\r\n    if (maybeInput == null) {\r\n        console.log(\"Couldn't find input element\");\r\n    }\r\n    else if (!(maybeInput instanceof HTMLInputElement)) {\r\n        console.log(\"Found element \".concat(maybeInput, \", but it wasn't an button\"));\r\n    }\r\n    else {\r\n        var args = maybeInput.value.split(\" \");\r\n        if (args[0] === \"mode\") {\r\n            handleModeRequest();\r\n        }\r\n        else if (args[0] === \"load_file\") {\r\n            handleLoadFileRequest(args);\r\n        }\r\n        else if (args[0] === \"view\") {\r\n            handleViewRequest(args);\r\n        }\r\n        else if (args[0] === \"search\") {\r\n            handleSearchRequest(args);\r\n        }\r\n        else {\r\n            handleInvalidRequest(args);\r\n        }\r\n        renderHTML();\r\n    }\r\n}\r\n/**\r\n * A helper function to handle a mode switching request. and push mode string to the console history.\r\n *\r\n * @returns: void\r\n * @param: none\r\n */\r\nfunction handleModeRequest() {\r\n    if (mode === \"brief\") {\r\n        mode = \"verbose\";\r\n    }\r\n    else if (mode === \"verbose\") {\r\n        mode = \"brief\";\r\n    }\r\n    var historyOutput = new Array(\"mode is \" + mode);\r\n    history.push(historyOutput);\r\n}\r\n/**\r\n * A helper function to handle a load_file request.\r\n * It will call mocked loadFile function to load csv file into global varibale csvContent\r\n * and push status string to the console history.\r\n *\r\n * @returns: void\r\n * @param: Input parameters. input[0] is load_file command, input[1] is file path\r\n */\r\nfunction handleLoadFileRequest(input) {\r\n    var result = \" loading \" + mock.loadFile(input[1]);\r\n    var historyOutput = new Array(\"Command: \".concat(input[0], \" \").concat(input[1]), \"Output: \" + input[1] + result);\r\n    if (mode == \"brief\")\r\n        historyOutput = new Array(input[1] + result);\r\n    history.push(historyOutput);\r\n}\r\n/**\r\n * A helper function to handle a view request. It will build a html table string representing the csv file content\r\n * and push it to the console history.\r\n *\r\n * @returns: void\r\n * @param: Input parameters. input[0] is view command\r\n */\r\nfunction handleViewRequest(input) {\r\n    var result = makeTableHTML(mock.view());\r\n    var historyOutput = new Array(\"Command: \".concat(input[0]), \"Output: \" + result);\r\n    if (mode == \"brief\")\r\n        historyOutput = new Array(result);\r\n    history.push(historyOutput);\r\n}\r\n/**\r\n * A helper function to handle a search request. It will build a html table string for search result\r\n * and push it to the console history.\r\n *\r\n * @returns: void\r\n * @param: Input parameters. input[0] is search command, input[1] is column to be search, input[2] is value to be searched\r\n */\r\nfunction handleSearchRequest(input) {\r\n    var result = mock.search(input[1], input[2]);\r\n    var displayResult = \"No result found\";\r\n    if (result.length > 0)\r\n        displayResult = makeTableHTML(result);\r\n    var historyOutput = new Array(\"Command: \".concat(input[0], \" \").concat(input[1], \" \").concat(input[2]), \"Output: \" + displayResult);\r\n    if (mode == \"brief\")\r\n        historyOutput = new Array(displayResult);\r\n    history.push(historyOutput);\r\n}\r\n/**\r\n * A helper function to handle an invalided request. It will build a error string and push it to the console history.\r\n *\r\n * @returns: void\r\n * @param: Input parameters. input[0] is search command\r\n */\r\nfunction handleInvalidRequest(input) {\r\n    var historyOutput = new Array(\"Command: \" + input[0], \"Output: Not a valid command\");\r\n    if (mode == \"brief\")\r\n        historyOutput = new Array(\"Not a valid command\");\r\n    history.push(historyOutput);\r\n}\r\n/**\r\n * A helper function that renders html table from a 2D array\r\n *\r\n * @returns a html table representing the 2D array\r\n * @param: data : an 2D array of data\r\n */\r\nfunction makeTableHTML(data) {\r\n    var result = \"<table border=1>\";\r\n    for (var i = 0; i < data.length; i++) {\r\n        result += \"<tr>\";\r\n        for (var j = 0; j < data[i].length; j++) {\r\n            result += \"<td>\" + data[i][j] + \"</td>\";\r\n        }\r\n        result += \"</tr>\";\r\n    }\r\n    result += \"</table>\";\r\n    return result;\r\n}\r\n/**\r\n * A helper function that renders the output onto the screen. It will update the internal HTML of the div that\r\n * represents the console history.\r\n *\r\n * @returns void\r\n * @param: none\r\n */\r\nfunction renderHTML() {\r\n    var newHtml = \"\";\r\n    history.forEach(function (output) {\r\n        output.forEach(function (line) {\r\n            newHtml += \"<p>\".concat(line, \"</p>\");\r\n        });\r\n    });\r\n    // Replace the contents of the old-rounds <div> with the HTML we generated above\r\n    // Since I prefer not to use \"id\" and use \"class\" instead here, we have to do [0]...\r\n    var oldREPLHistory = document.getElementById(\"repl-history\");\r\n    if (oldREPLHistory == null) {\r\n        console.log(\"Could not find old-REPL element\");\r\n        return;\r\n    }\r\n    else if (!(oldREPLHistory instanceof HTMLElement)) {\r\n        console.log(\"first old-REPL element was not an HTMLElement\");\r\n        return;\r\n    }\r\n    else {\r\n        oldREPLHistory.innerHTML = newHtml;\r\n    }\r\n}\r\nfunction clearHistory() {\r\n    history = [];\r\n}\r\nfunction setMode(newMode) {\r\n    mode = newMode;\r\n}\r\n// Provide this to other modules (e.g., for testing!)\r\n// The configuration in this project will require /something/ to be exported.\r\nexport { handleButtonClick, clearHistory, setMode };\r\n"],"names":["csvContent","dataMap","Map","history","mode","handleButtonClick","maybeInput","document","getElementById","console","log","HTMLInputElement","args","value","split","historyOutput","Array","push","handleModeRequest","input","result","csvFile","get","mock","concat","handleLoadFileRequest","makeTableHTML","handleViewRequest","column","length","displayResult","handleSearchRequest","handleInvalidRequest","newHtml","forEach","output","line","oldREPLHistory","HTMLElement","innerHTML","renderHTML","data","i","j","window","onload","button","HTMLButtonElement","addEventListener","prepareButtonClick"],"sourceRoot":""}